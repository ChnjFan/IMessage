// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: auth.proto
// Protobuf C++ Version: 5.29.0

#ifndef auth_2eproto_2epb_2eh
#define auth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_auth_2eproto;
namespace user {
namespace auth {
class getUserTokenReq;
struct getUserTokenReqDefaultTypeInternal;
extern getUserTokenReqDefaultTypeInternal _getUserTokenReq_default_instance_;
class getUserTokenResp;
struct getUserTokenRespDefaultTypeInternal;
extern getUserTokenRespDefaultTypeInternal _getUserTokenResp_default_instance_;
class parseTokenReq;
struct parseTokenReqDefaultTypeInternal;
extern parseTokenReqDefaultTypeInternal _parseTokenReq_default_instance_;
class parseTokenResp;
struct parseTokenRespDefaultTypeInternal;
extern parseTokenRespDefaultTypeInternal _parseTokenResp_default_instance_;
class registerUserReq;
struct registerUserReqDefaultTypeInternal;
extern registerUserReqDefaultTypeInternal _registerUserReq_default_instance_;
class registerUserResp;
struct registerUserRespDefaultTypeInternal;
extern registerUserRespDefaultTypeInternal _registerUserResp_default_instance_;
}  // namespace auth
}  // namespace user
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace user {
namespace auth {

// ===================================================================


// -------------------------------------------------------------------

class registerUserResp final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.auth.registerUserResp) */ {
 public:
  inline registerUserResp() : registerUserResp(nullptr) {}
  ~registerUserResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(registerUserResp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(registerUserResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR registerUserResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline registerUserResp(const registerUserResp& from) : registerUserResp(nullptr, from) {}
  inline registerUserResp(registerUserResp&& from) noexcept
      : registerUserResp(nullptr, std::move(from)) {}
  inline registerUserResp& operator=(const registerUserResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerUserResp& operator=(registerUserResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerUserResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerUserResp* internal_default_instance() {
    return reinterpret_cast<const registerUserResp*>(
        &_registerUserResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(registerUserResp& a, registerUserResp& b) { a.Swap(&b); }
  inline void Swap(registerUserResp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerUserResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerUserResp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<registerUserResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const registerUserResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const registerUserResp& from) { registerUserResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(registerUserResp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.auth.registerUserResp"; }

 protected:
  explicit registerUserResp(::google::protobuf::Arena* arena);
  registerUserResp(::google::protobuf::Arena* arena, const registerUserResp& from);
  registerUserResp(::google::protobuf::Arena* arena, registerUserResp&& from) noexcept
      : registerUserResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result() ;
  bool result() const;
  void set_result(bool value);

  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);

  public:
  // @@protoc_insertion_point(class_scope:user.auth.registerUserResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const registerUserResp& from_msg);
    bool result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class registerUserReq final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.auth.registerUserReq) */ {
 public:
  inline registerUserReq() : registerUserReq(nullptr) {}
  ~registerUserReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(registerUserReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(registerUserReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR registerUserReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline registerUserReq(const registerUserReq& from) : registerUserReq(nullptr, from) {}
  inline registerUserReq(registerUserReq&& from) noexcept
      : registerUserReq(nullptr, std::move(from)) {}
  inline registerUserReq& operator=(const registerUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerUserReq& operator=(registerUserReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerUserReq* internal_default_instance() {
    return reinterpret_cast<const registerUserReq*>(
        &_registerUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(registerUserReq& a, registerUserReq& b) { a.Swap(&b); }
  inline void Swap(registerUserReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerUserReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerUserReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<registerUserReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const registerUserReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const registerUserReq& from) { registerUserReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(registerUserReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.auth.registerUserReq"; }

 protected:
  explicit registerUserReq(::google::protobuf::Arena* arena);
  registerUserReq(::google::protobuf::Arena* arena, const registerUserReq& from);
  registerUserReq(::google::protobuf::Arena* arena, registerUserReq&& from) noexcept
      : registerUserReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNickNameFieldNumber = 2,
    kFaceURLFieldNumber = 3,
    kUserIDFieldNumber = 1,
  };
  // string nickName = 2;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // string faceURL = 3;
  void clear_faceurl() ;
  const std::string& faceurl() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_faceurl(Arg_&& arg, Args_... args);
  std::string* mutable_faceurl();
  PROTOBUF_NODISCARD std::string* release_faceurl();
  void set_allocated_faceurl(std::string* value);

  private:
  const std::string& _internal_faceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceurl(
      const std::string& value);
  std::string* _internal_mutable_faceurl();

  public:
  // int32 userID = 1;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.auth.registerUserReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const registerUserReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::ArenaStringPtr faceurl_;
    ::int32_t userid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class parseTokenResp final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.auth.parseTokenResp) */ {
 public:
  inline parseTokenResp() : parseTokenResp(nullptr) {}
  ~parseTokenResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(parseTokenResp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(parseTokenResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR parseTokenResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline parseTokenResp(const parseTokenResp& from) : parseTokenResp(nullptr, from) {}
  inline parseTokenResp(parseTokenResp&& from) noexcept
      : parseTokenResp(nullptr, std::move(from)) {}
  inline parseTokenResp& operator=(const parseTokenResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline parseTokenResp& operator=(parseTokenResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const parseTokenResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const parseTokenResp* internal_default_instance() {
    return reinterpret_cast<const parseTokenResp*>(
        &_parseTokenResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(parseTokenResp& a, parseTokenResp& b) { a.Swap(&b); }
  inline void Swap(parseTokenResp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(parseTokenResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  parseTokenResp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<parseTokenResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const parseTokenResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const parseTokenResp& from) { parseTokenResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(parseTokenResp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.auth.parseTokenResp"; }

 protected:
  explicit parseTokenResp(::google::protobuf::Arena* arena);
  parseTokenResp(::google::protobuf::Arena* arena, const parseTokenResp& from);
  parseTokenResp(::google::protobuf::Arena* arena, parseTokenResp&& from) noexcept
      : parseTokenResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIDFieldNumber = 1,
    kPlatformIDFieldNumber = 2,
    kExpireTimeSecondsFieldNumber = 3,
  };
  // int32 userID = 1;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // int32 platformID = 2;
  void clear_platformid() ;
  ::int32_t platformid() const;
  void set_platformid(::int32_t value);

  private:
  ::int32_t _internal_platformid() const;
  void _internal_set_platformid(::int32_t value);

  public:
  // int64 expireTimeSeconds = 3;
  void clear_expiretimeseconds() ;
  ::int64_t expiretimeseconds() const;
  void set_expiretimeseconds(::int64_t value);

  private:
  ::int64_t _internal_expiretimeseconds() const;
  void _internal_set_expiretimeseconds(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.auth.parseTokenResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const parseTokenResp& from_msg);
    ::int32_t userid_;
    ::int32_t platformid_;
    ::int64_t expiretimeseconds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class parseTokenReq final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.auth.parseTokenReq) */ {
 public:
  inline parseTokenReq() : parseTokenReq(nullptr) {}
  ~parseTokenReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(parseTokenReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(parseTokenReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR parseTokenReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline parseTokenReq(const parseTokenReq& from) : parseTokenReq(nullptr, from) {}
  inline parseTokenReq(parseTokenReq&& from) noexcept
      : parseTokenReq(nullptr, std::move(from)) {}
  inline parseTokenReq& operator=(const parseTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline parseTokenReq& operator=(parseTokenReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const parseTokenReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const parseTokenReq* internal_default_instance() {
    return reinterpret_cast<const parseTokenReq*>(
        &_parseTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(parseTokenReq& a, parseTokenReq& b) { a.Swap(&b); }
  inline void Swap(parseTokenReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(parseTokenReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  parseTokenReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<parseTokenReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const parseTokenReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const parseTokenReq& from) { parseTokenReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(parseTokenReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.auth.parseTokenReq"; }

 protected:
  explicit parseTokenReq(::google::protobuf::Arena* arena);
  parseTokenReq(::google::protobuf::Arena* arena, const parseTokenReq& from);
  parseTokenReq(::google::protobuf::Arena* arena, parseTokenReq&& from) noexcept
      : parseTokenReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:user.auth.parseTokenReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const parseTokenReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class getUserTokenResp final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.auth.getUserTokenResp) */ {
 public:
  inline getUserTokenResp() : getUserTokenResp(nullptr) {}
  ~getUserTokenResp() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(getUserTokenResp* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(getUserTokenResp));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR getUserTokenResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline getUserTokenResp(const getUserTokenResp& from) : getUserTokenResp(nullptr, from) {}
  inline getUserTokenResp(getUserTokenResp&& from) noexcept
      : getUserTokenResp(nullptr, std::move(from)) {}
  inline getUserTokenResp& operator=(const getUserTokenResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline getUserTokenResp& operator=(getUserTokenResp&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getUserTokenResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const getUserTokenResp* internal_default_instance() {
    return reinterpret_cast<const getUserTokenResp*>(
        &_getUserTokenResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(getUserTokenResp& a, getUserTokenResp& b) { a.Swap(&b); }
  inline void Swap(getUserTokenResp* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getUserTokenResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getUserTokenResp* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<getUserTokenResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const getUserTokenResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const getUserTokenResp& from) { getUserTokenResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(getUserTokenResp* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.auth.getUserTokenResp"; }

 protected:
  explicit getUserTokenResp(::google::protobuf::Arena* arena);
  getUserTokenResp(::google::protobuf::Arena* arena, const getUserTokenResp& from);
  getUserTokenResp(::google::protobuf::Arena* arena, getUserTokenResp&& from) noexcept
      : getUserTokenResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 1,
    kExpireTimeSecondsFieldNumber = 2,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // int64 expireTimeSeconds = 2;
  void clear_expiretimeseconds() ;
  ::int64_t expiretimeseconds() const;
  void set_expiretimeseconds(::int64_t value);

  private:
  ::int64_t _internal_expiretimeseconds() const;
  void _internal_set_expiretimeseconds(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.auth.getUserTokenResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const getUserTokenResp& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::int64_t expiretimeseconds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class getUserTokenReq final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:user.auth.getUserTokenReq) */ {
 public:
  inline getUserTokenReq() : getUserTokenReq(nullptr) {}
  ~getUserTokenReq() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(getUserTokenReq* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(getUserTokenReq));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR getUserTokenReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline getUserTokenReq(const getUserTokenReq& from) : getUserTokenReq(nullptr, from) {}
  inline getUserTokenReq(getUserTokenReq&& from) noexcept
      : getUserTokenReq(nullptr, std::move(from)) {}
  inline getUserTokenReq& operator=(const getUserTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline getUserTokenReq& operator=(getUserTokenReq&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getUserTokenReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const getUserTokenReq* internal_default_instance() {
    return reinterpret_cast<const getUserTokenReq*>(
        &_getUserTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(getUserTokenReq& a, getUserTokenReq& b) { a.Swap(&b); }
  inline void Swap(getUserTokenReq* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getUserTokenReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getUserTokenReq* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<getUserTokenReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const getUserTokenReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const getUserTokenReq& from) { getUserTokenReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(getUserTokenReq* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "user.auth.getUserTokenReq"; }

 protected:
  explicit getUserTokenReq(::google::protobuf::Arena* arena);
  getUserTokenReq(::google::protobuf::Arena* arena, const getUserTokenReq& from);
  getUserTokenReq(::google::protobuf::Arena* arena, getUserTokenReq&& from) noexcept
      : getUserTokenReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSecretFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // string secret = 2;
  void clear_secret() ;
  const std::string& secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secret(Arg_&& arg, Args_... args);
  std::string* mutable_secret();
  PROTOBUF_NODISCARD std::string* release_secret();
  void set_allocated_secret(std::string* value);

  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(
      const std::string& value);
  std::string* _internal_mutable_secret();

  public:
  // int32 userID = 1;
  void clear_userid() ;
  ::int32_t userid() const;
  void set_userid(::int32_t value);

  private:
  ::int32_t _internal_userid() const;
  void _internal_set_userid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:user.auth.getUserTokenReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const getUserTokenReq& from_msg);
    ::google::protobuf::internal::ArenaStringPtr secret_;
    ::int32_t userid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// getUserTokenReq

// int32 userID = 1;
inline void getUserTokenReq::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_ = 0;
}
inline ::int32_t getUserTokenReq::userid() const {
  // @@protoc_insertion_point(field_get:user.auth.getUserTokenReq.userID)
  return _internal_userid();
}
inline void getUserTokenReq::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:user.auth.getUserTokenReq.userID)
}
inline ::int32_t getUserTokenReq::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_;
}
inline void getUserTokenReq::_internal_set_userid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_ = value;
}

// string secret = 2;
inline void getUserTokenReq::clear_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.ClearToEmpty();
}
inline const std::string& getUserTokenReq::secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.auth.getUserTokenReq.secret)
  return _internal_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void getUserTokenReq::set_secret(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.auth.getUserTokenReq.secret)
}
inline std::string* getUserTokenReq::mutable_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:user.auth.getUserTokenReq.secret)
  return _s;
}
inline const std::string& getUserTokenReq::_internal_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.secret_.Get();
}
inline void getUserTokenReq::_internal_set_secret(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.Set(value, GetArena());
}
inline std::string* getUserTokenReq::_internal_mutable_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.secret_.Mutable( GetArena());
}
inline std::string* getUserTokenReq::release_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.auth.getUserTokenReq.secret)
  return _impl_.secret_.Release();
}
inline void getUserTokenReq::set_allocated_secret(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.secret_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.secret_.IsDefault()) {
    _impl_.secret_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.auth.getUserTokenReq.secret)
}

// -------------------------------------------------------------------

// getUserTokenResp

// string token = 1;
inline void getUserTokenResp::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& getUserTokenResp::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.auth.getUserTokenResp.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void getUserTokenResp::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.auth.getUserTokenResp.token)
}
inline std::string* getUserTokenResp::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:user.auth.getUserTokenResp.token)
  return _s;
}
inline const std::string& getUserTokenResp::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void getUserTokenResp::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* getUserTokenResp::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* getUserTokenResp::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.auth.getUserTokenResp.token)
  return _impl_.token_.Release();
}
inline void getUserTokenResp::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.auth.getUserTokenResp.token)
}

// int64 expireTimeSeconds = 2;
inline void getUserTokenResp::clear_expiretimeseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiretimeseconds_ = ::int64_t{0};
}
inline ::int64_t getUserTokenResp::expiretimeseconds() const {
  // @@protoc_insertion_point(field_get:user.auth.getUserTokenResp.expireTimeSeconds)
  return _internal_expiretimeseconds();
}
inline void getUserTokenResp::set_expiretimeseconds(::int64_t value) {
  _internal_set_expiretimeseconds(value);
  // @@protoc_insertion_point(field_set:user.auth.getUserTokenResp.expireTimeSeconds)
}
inline ::int64_t getUserTokenResp::_internal_expiretimeseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiretimeseconds_;
}
inline void getUserTokenResp::_internal_set_expiretimeseconds(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiretimeseconds_ = value;
}

// -------------------------------------------------------------------

// parseTokenReq

// string token = 1;
inline void parseTokenReq::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& parseTokenReq::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.auth.parseTokenReq.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void parseTokenReq::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.auth.parseTokenReq.token)
}
inline std::string* parseTokenReq::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:user.auth.parseTokenReq.token)
  return _s;
}
inline const std::string& parseTokenReq::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void parseTokenReq::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* parseTokenReq::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* parseTokenReq::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.auth.parseTokenReq.token)
  return _impl_.token_.Release();
}
inline void parseTokenReq::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.auth.parseTokenReq.token)
}

// -------------------------------------------------------------------

// parseTokenResp

// int32 userID = 1;
inline void parseTokenResp::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_ = 0;
}
inline ::int32_t parseTokenResp::userid() const {
  // @@protoc_insertion_point(field_get:user.auth.parseTokenResp.userID)
  return _internal_userid();
}
inline void parseTokenResp::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:user.auth.parseTokenResp.userID)
}
inline ::int32_t parseTokenResp::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_;
}
inline void parseTokenResp::_internal_set_userid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_ = value;
}

// int32 platformID = 2;
inline void parseTokenResp::clear_platformid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platformid_ = 0;
}
inline ::int32_t parseTokenResp::platformid() const {
  // @@protoc_insertion_point(field_get:user.auth.parseTokenResp.platformID)
  return _internal_platformid();
}
inline void parseTokenResp::set_platformid(::int32_t value) {
  _internal_set_platformid(value);
  // @@protoc_insertion_point(field_set:user.auth.parseTokenResp.platformID)
}
inline ::int32_t parseTokenResp::_internal_platformid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.platformid_;
}
inline void parseTokenResp::_internal_set_platformid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platformid_ = value;
}

// int64 expireTimeSeconds = 3;
inline void parseTokenResp::clear_expiretimeseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiretimeseconds_ = ::int64_t{0};
}
inline ::int64_t parseTokenResp::expiretimeseconds() const {
  // @@protoc_insertion_point(field_get:user.auth.parseTokenResp.expireTimeSeconds)
  return _internal_expiretimeseconds();
}
inline void parseTokenResp::set_expiretimeseconds(::int64_t value) {
  _internal_set_expiretimeseconds(value);
  // @@protoc_insertion_point(field_set:user.auth.parseTokenResp.expireTimeSeconds)
}
inline ::int64_t parseTokenResp::_internal_expiretimeseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expiretimeseconds_;
}
inline void parseTokenResp::_internal_set_expiretimeseconds(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expiretimeseconds_ = value;
}

// -------------------------------------------------------------------

// registerUserReq

// int32 userID = 1;
inline void registerUserReq::clear_userid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_ = 0;
}
inline ::int32_t registerUserReq::userid() const {
  // @@protoc_insertion_point(field_get:user.auth.registerUserReq.userID)
  return _internal_userid();
}
inline void registerUserReq::set_userid(::int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:user.auth.registerUserReq.userID)
}
inline ::int32_t registerUserReq::_internal_userid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.userid_;
}
inline void registerUserReq::_internal_set_userid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.userid_ = value;
}

// string nickName = 2;
inline void registerUserReq::clear_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& registerUserReq::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.auth.registerUserReq.nickName)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void registerUserReq::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.auth.registerUserReq.nickName)
}
inline std::string* registerUserReq::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:user.auth.registerUserReq.nickName)
  return _s;
}
inline const std::string& registerUserReq::_internal_nickname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nickname_.Get();
}
inline void registerUserReq::_internal_set_nickname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* registerUserReq::_internal_mutable_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* registerUserReq::release_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.auth.registerUserReq.nickName)
  return _impl_.nickname_.Release();
}
inline void registerUserReq::set_allocated_nickname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.auth.registerUserReq.nickName)
}

// string faceURL = 3;
inline void registerUserReq::clear_faceurl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.faceurl_.ClearToEmpty();
}
inline const std::string& registerUserReq::faceurl() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:user.auth.registerUserReq.faceURL)
  return _internal_faceurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void registerUserReq::set_faceurl(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.faceurl_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:user.auth.registerUserReq.faceURL)
}
inline std::string* registerUserReq::mutable_faceurl() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_faceurl();
  // @@protoc_insertion_point(field_mutable:user.auth.registerUserReq.faceURL)
  return _s;
}
inline const std::string& registerUserReq::_internal_faceurl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.faceurl_.Get();
}
inline void registerUserReq::_internal_set_faceurl(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.faceurl_.Set(value, GetArena());
}
inline std::string* registerUserReq::_internal_mutable_faceurl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.faceurl_.Mutable( GetArena());
}
inline std::string* registerUserReq::release_faceurl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:user.auth.registerUserReq.faceURL)
  return _impl_.faceurl_.Release();
}
inline void registerUserReq::set_allocated_faceurl(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.faceurl_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.faceurl_.IsDefault()) {
    _impl_.faceurl_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:user.auth.registerUserReq.faceURL)
}

// -------------------------------------------------------------------

// registerUserResp

// bool result = 1;
inline void registerUserResp::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = false;
}
inline bool registerUserResp::result() const {
  // @@protoc_insertion_point(field_get:user.auth.registerUserResp.result)
  return _internal_result();
}
inline void registerUserResp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:user.auth.registerUserResp.result)
}
inline bool registerUserResp::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void registerUserResp::_internal_set_result(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace user


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // auth_2eproto_2epb_2eh
